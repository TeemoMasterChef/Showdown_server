{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen9ffa/teams.ts"],
  "sourcesContent": ["import type { PRNG, PRNGSeed } from \"../../../sim/prng\";\r\nimport { RandomTeams, type MoveCounter } from \"../gen9/teams\";\r\n\r\n// First, some lists of moves that can be used for rules throughout set generation. Taken from regular gen9.\r\n\r\n// Moves that shouldn't be the only STAB moves:\r\n// (bulldoze added)\r\nconst NO_STAB = [\r\n\t'accelerock', 'aquajet', 'bounce', 'breakingswipe', 'bulldoze', 'bulletpunch', 'chatter', 'chloroblast', 'clearsmog', 'covet',\r\n\t'dragontail', 'doomdesire', 'electroweb', 'eruption', 'explosion', 'fakeout', 'feint', 'flamecharge', 'flipturn', 'futuresight',\r\n\t'grassyglide', 'iceshard', 'icywind', 'incinerate', 'infestation', 'machpunch', 'meteorbeam', 'mortalspin', 'nuzzle', 'pluck', 'pursuit',\r\n\t'quickattack', 'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak', 'skydrop', 'snarl', 'strugglebug', 'suckerpunch', 'thunderclap', 'trailblaze',\r\n\t'uturn', 'vacuumwave', 'voltswitch', 'watershuriken', 'waterspout',\r\n];\r\n\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\r\n];\r\n\r\n// Protect and its variants\r\nconst PROTECT_MOVES = [\r\n\t'banefulbunker', 'burningbulwark', 'protect', 'silktrap', 'spikyshield',\r\n];\r\n\r\n// Moves that switch the user out\r\nconst PIVOT_MOVES = [\r\n\t'chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch',\r\n];\r\n\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\r\n];\r\n\r\n// Moves which boost Special Attack:\r\nconst SPECIAL_SETUP = [\r\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow', 'takeheart', 'torchsong',\r\n];\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\r\n];\r\n\r\n// Setup (stat-boosting) moves\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cosmicpower', 'curse', 'defensecurl',\r\n\t'dragondance', 'flamecharge', 'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch',\r\n\t'quiverdance', 'raindance', 'rockpolish', 'shellsmash', 'shiftgear', 'snowscape', 'sunnyday', 'swordsdance', 'tailglow', 'tidyup',\r\n\t'trailblaze', 'workup', 'victorydance',\r\n];\r\n\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'trailblaze',\r\n];\r\n\r\n// Moves that would want to generate together\r\nconst MOVE_PAIRS = [\r\n\t['lightscreen', 'reflect'],\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t// FFA:\r\n\t['protect', 'leechseed'],\r\n\t['spikyshield', 'leechseed'],\r\n\t['icebeam', 'thunderbolt'],\r\n];\r\n\r\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\r\nconst PRIORITY_POKEMON = [\r\n\t'breloom', 'brutebonnet', 'cacturne', 'honchkrow', 'kingambit', 'palafin', 'rillaboom', 'scizor',\r\n];\r\n\r\n/** Pokemon who should never be in the lead slot */\r\nconst NO_LEAD_POKEMON = [\r\n\t'Roaring Moon', 'Zacian', 'Zamazenta',\r\n];\r\n\r\n// Specific to FFA\r\n// Spread moves are only enforced as STABs when a non-spread STAB of that type is unavailable\r\nconst SPREAD = [\r\n\t\"Acid\", \"Air Cutter\", \"Astral Barrage\", \"Bleakwind Storm\", \"Blizzard\", \"Breaking Swipe\", \"Brutal Swing\",\r\n\t\"Bulldoze\", \"Burning Jealousy\", \"Clanging Scales\", \"Dazzling Gleam\", \"Diamond Storm\", \"Disarming Voice\", \"Discharge\",\r\n\t\"Dragon Energy\", \"Earthquake\", \"Electroweb\", \"Eruption\", \"Explosion\", \"Fiery Wrath\", \"Glacial Lance\", \"Glaciate\",\r\n\t\"Heat Wave\", \"Hyper Voice\", \"Icy Wind\", \"Incinerate\", \"Lava Plume\", \"Make It Rain\", \"Matcha Gotcha\", \"Misty Explosion\",\r\n\t\"Mortal Spin\", \"Muddy Water\", \"Origin Pulse\", \"Overdrive\", \"Parabolic Charge\", \"Petal Blizzard\", \"Powder Snow\",\r\n\t\"Precipice Blades\", \"Razor Leaf\", \"Relic Song\", \"Rock Slide\", \"Sandsear Storm\", \"Self-Destruct\", \"Sludge Wave\", \"Snarl\",\r\n\t\"Sparkling Aria\", \"Springtide Storm\", \"Struggle Bug\", \"Surf\", \"Swift\", \"Twister\", \"Water Spout\", \"Wildbolt Storm\",\r\n];\r\n\r\nexport class RandomFFATeams extends RandomTeams {\r\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\r\n\t\tsuper(format, prng);\r\n\r\n\t\tthis.noStab = NO_STAB;\r\n\r\n\t\t// Overwrite enforcementcheckers where needed here\r\n\t\tthis.moveEnforcementCheckers['Grass'] = (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t!counter.get('Grass') && (\r\n\t\t\t\tmovePool.includes('leafstorm') || species.baseStats.atk >= 100 ||\r\n\t\t\t\ttypes.includes('Electric') || abilities.includes('Seed Sower') ||\r\n\t\t\t\tspecies.id === 'ludicolo'\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.moveEnforcementCheckers['Steel'] = (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t!counter.get('Steel') && !(['Empoleon', 'Magearna', 'Bronzong'].includes(species.baseSpecies))\r\n\t\t);\r\n\t}\r\n\r\n\toverride cullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.screens) {\r\n\t\t\tif (movePool.includes('auroraveil')) this.fastPop(movePool, movePool.indexOf('auroraveil'));\r\n\t\t\tif (movePool.length >= this.maxMoveCount + 2) {\r\n\t\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\r\n\t\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (teamDetails.stickyWeb) {\r\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stealthRock) {\r\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\r\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.statusCure) {\r\n\t\t\tif (movePool.includes('healbell')) this.fastPop(movePool, movePool.indexOf('healbell'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t// [statusMoves, ['healingwish', 'switcheroo', 'trick']], // does nothing\r\n\t\t\t[SETUP, PIVOT_MOVES],\r\n\r\n\t\t\t[SETUP, ['defog', 'haze']],\r\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\r\n\t\t\t[SPECIAL_SETUP, SPECIAL_SETUP],\r\n\t\t\t['substitute', PIVOT_MOVES],\r\n\t\t\t[SPEED_SETUP, ['aquajet', 'rest', 'trickroom']],\r\n\t\t\t[['icywind', 'thunderwave', 'futuresight'], 'trickroom'],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t[['psychic', 'psychicnoise'], ['psyshock', 'psychicnoise']],\r\n\t\t\t[['liquidation', 'scald'], ['wavecrash', 'hydropump']],\r\n\t\t\t[['gigadrain', 'leafstorm'], ['leafstorm', 'energyball']],\r\n\t\t\t['powerwhip', 'hornleech'],\r\n\t\t\t['airslash', 'hurricane'],\r\n\t\t\t['knockoff', ['jawlock', 'foulplay']],\r\n\t\t\t['throatchop', ['crunch', 'foulplay']],\r\n\t\t\t['doubleedge', ['bodyslam', 'headbutt']],\r\n\t\t\t['fireblast', ['fierydance', 'flamethrower']],\r\n\t\t\t['thunderpunch', 'wildcharge'],\r\n\t\t\t['thunderbolt', 'thundercage'],\r\n\t\t\t['gunkshot', 'poisonjab'],\r\n\t\t\t['aurasphere', 'focusblast'],\r\n\t\t\t['closecombat', 'drainpunch'],\r\n\t\t\t[['dragonpulse', 'spacialrend'], 'dracometeor'],\r\n\t\t\t['alluringvoice', 'dazzlinggleam'],\r\n\t\t\t['surf', 'muddywater'],\r\n\t\t\t['nuzzle', 'discharge'],\r\n\t\t\t['phantomforce', ['poltergeist', 'shadowball']],\r\n\t\t\t['bugbite', 'pounce'],\r\n\r\n\t\t\t// These status moves are redundant with each other\r\n\t\t\t['taunt', ['disable', 'encore']],\r\n\t\t\t['thunderwave', 'willowisp'],\r\n\t\t\t['lifedew', 'wish'],\r\n\t\t\t['rest', 'protect'],\r\n\t\t\t['bulkup', 'irondefense'],\r\n\r\n\t\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\r\n\t\t\t// Chansey and Blissey\r\n\t\t\t['healbell', 'stealthrock'],\r\n\t\t\t// Smeargle\r\n\t\t\t[PROTECT_MOVES, PROTECT_MOVES],\r\n\t\t\t// Slaking\r\n\t\t\t['roar', 'slackoff'],\r\n\t\t\t// Shiftry\r\n\t\t\t['lowkick', 'petalblizzard'],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tif (!types.includes('Ice')) this.incompatibleMoves(moves, movePool, 'icebeam', 'icywind');\r\n\r\n\t\tif (!types.includes('Dark') && teraType !== 'Dark') this.incompatibleMoves(moves, movePool, 'knockoff', 'suckerpunch');\r\n\r\n\t\tif (!types.includes('Rock')) this.incompatibleMoves(moves, movePool, 'rockslide', 'stoneedge');\r\n\r\n\t\tif (!types.includes('Ground')) this.incompatibleMoves(moves, movePool, 'earthquake', 'stompingtantrum');\r\n\r\n\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context:\r\n\t\t// To force Close Combat on Barraskewda without locking it to Tera Fighting\r\n\t\tif (species.id === 'barraskewda') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, ['psychicfangs', 'throatchop'], ['poisonjab', 'throatchop']);\r\n\t\t}\r\n\r\n\t\t// Defense Curl Blissey makes this complicated\r\n\t\tif (species.id !== 'blissey') this.incompatibleMoves(moves, movePool, SETUP, HAZARDS);\r\n\t\t// Band-aid fix to enforce Mortal Spin on Glimmora\r\n\t\tif (species.id === 'glimmora') this.incompatibleMoves(moves, movePool, 'spikes', 'stealthrock');\r\n\t}\r\n\r\n\t// Generate random moveset for a given species, role, tera type.\r\n\toverride randomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tmovePool: string[],\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\t// Helper function for (STAB-)move enforcement later on\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Helper function for paired move enforcement\r\n\t\tconst addPairedMove = (moveid: string) => {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (role === 'Tera Blast user') {\r\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\tif (role === 'Imprisoner') {\r\n\t\t\tcounter = this.addMove('imprison', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Facade if Guts is a possible ability\r\n\t\tif (movePool.includes('facade') && abilities.includes('Guts')) {\r\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Sticky Web\r\n\t\tif (movePool.includes('stickyweb')) {\r\n\t\t\tcounter = this.addMove('stickyweb', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Aurora Veil\r\n\t\tif (movePool.includes('auroraveil')) {\r\n\t\t\tcounter = this.addMove('auroraveil', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\r\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) {\r\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\tif (movePool.includes('defog')) {\r\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Knock Off on pure Normal- and Fighting-types\r\n\t\tif (types.length === 1 && (types.includes('Normal') || types.includes('Fighting'))) {\r\n\t\t\tif (movePool.includes('knockoff')) {\r\n\t\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Rock Slide on Wallbreaker Rock types\r\n\t\tif (types.includes('Rock') && role === 'Wallbreaker') {\r\n\t\t\tif (movePool.includes('rockslide')) {\r\n\t\t\t\tcounter = this.addMove('rockslide', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB priority\r\n\t\tif (role === 'Wallbreaker' || PRIORITY_POKEMON.includes(species.id)) {\r\n\t\t\tconst priorityMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (\r\n\t\t\t\t\ttypes.includes(moveType) && (move.priority > 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) &&\r\n\t\t\t\t\t(move.basePower || move.basePowerCallback)\r\n\t\t\t\t) {\r\n\t\t\t\t\tpriorityMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (priorityMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(priorityMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tlet stabMoves: string[] = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Don't enforce spread STAB if non-spread STAB is available\r\n\t\t\tconst nonSpreadSTAB = stabMoves.filter(s => !SPREAD.includes(s));\r\n\t\t\tif (nonSpreadSTAB.length) stabMoves = nonSpreadSTAB;\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t// Enforce Thunderbolt on Regice\r\n\t\t\t\taddPairedMove(moveid);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Tera STAB on all roles\r\n\t\tif (!counter.get('stabtera')) {\r\n\t\t\tlet stabMoves: string[] = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Don't enforce spread STAB if non-spread STAB is available\r\n\t\t\tconst nonSpreadSTAB = stabMoves.filter(s => !SPREAD.includes(s));\r\n\t\t\tif (nonSpreadSTAB.length) stabMoves = nonSpreadSTAB;\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t// Enforce Ice Beam on Tera Electric Porygon-Z\r\n\t\t\t\taddPairedMove(moveid);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\tif (!counter.get('stab')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce pivoting moves on AV Pivot\r\n\t\tif (role === 'AV Pivot') {\r\n\t\t\tconst pivotMoves = movePool.filter(moveid => ['uturn', 'voltswitch'].includes(moveid));\r\n\t\t\tif (pivotMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(pivotMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support'].includes(role) || ['blissey', 'dudunsparce'].includes(species.id)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\r\n\t\t\t// First, try to add a non-Speed setup move\r\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\r\n\t\t\tif (nonSpeedSetupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\r\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\r\n\t\t\t\tif (setupMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Protect\r\n\t\tif (!['Bulky Setup', 'Bulky Support', 'Wallbreaker'].includes(role)) {\r\n\t\t\tconst protectMoves = movePool.filter(moveid => PROTECT_MOVES.includes(moveid));\r\n\t\t\tif (protectMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(protectMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t// Enforce Wish and Leech Seed with Protect/Spiky Shield\r\n\t\t\t\taddPairedMove(moveid);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\r\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tmoves.add(moveid);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t\taddPairedMove(moveid);\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\toverride shouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): boolean {\r\n\t\tswitch (ability) {\r\n\t\t// Abilities which are primarily useful for certain moves or with team support\r\n\t\tcase 'Chlorophyll': case 'Solar Power':\r\n\t\t\treturn !teamDetails.sun;\r\n\t\tcase 'Defiant':\r\n\t\t\treturn (species.id === 'thundurus' && !!counter.get('Status'));\r\n\t\tcase 'Hydration': case 'Swift Swim':\r\n\t\t\treturn !teamDetails.rain;\r\n\t\tcase 'Iron Fist': case 'Skill Link':\r\n\t\t\treturn !counter.get(this.dex.toID(ability));\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Prankster':\r\n\t\t\treturn !counter.get('Status');\r\n\t\tcase 'Sand Force': case 'Sand Rush':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Slush Rush':\r\n\t\t\treturn !teamDetails.snow;\r\n\t\tcase 'Swarm':\r\n\t\t\treturn !counter.get('Bug');\r\n\t\tcase 'Torrent':\r\n\t\t\treturn (!counter.get('Water') && !moves.has('flipturn'));\r\n\t\tcase 'Serene Grace':\r\n\t\t\treturn (!counter.get('serenegrace'));\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\toverride getAbility(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tif (abilities.length <= 1) return abilities[0];\r\n\r\n\t\tconst abilityAllowed: string[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilities) {\r\n\t\t\tif (!this.shouldCullAbility(\r\n\t\t\t\tability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Pick a random allowed ability\r\n\t\tif (abilityAllowed.length >= 1) return this.sample(abilityAllowed);\r\n\r\n\t\t// If all abilities are rejected, prioritize weather abilities over non-weather abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tconst weatherAbilities = abilities.filter(\r\n\t\t\t\ta => ['Chlorophyll', 'Hydration', 'Sand Force', 'Sand Rush', 'Slush Rush', 'Solar Power', 'Swift Swim'].includes(a)\r\n\t\t\t);\r\n\t\t\tif (weatherAbilities.length) return this.sample(weatherAbilities);\r\n\t\t}\r\n\r\n\t\t// Pick a random ability\r\n\t\treturn this.sample(abilities);\r\n\t}\r\n\r\n\toverride getPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t) {\r\n\t\tif (species.requiredItems) {\r\n\t\t\t// Z-Crystals aren't available in Gen 9, so require Plates\r\n\t\t\tif (species.baseSpecies === 'Arceus') {\r\n\t\t\t\treturn species.requiredItems[0];\r\n\t\t\t}\r\n\t\t\treturn this.sample(species.requiredItems);\r\n\t\t}\r\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\r\n\t\tif (moves.has('acrobatics')) {\r\n\t\t\treturn (ability === 'Protosynthesis') ? 'Booster Energy' : '';\r\n\t\t}\r\n\t\tif (species.id === 'pikachu') return 'Light Ball';\r\n\t\tif (species.id === 'regieleki') return 'Magnet';\r\n\t\tif (species.id === 'blaziken') return 'Life Orb';\r\n\t\tif (species.id === 'lokix') {\r\n\t\t\treturn (role === 'Fast Attacker') ? 'Silver Powder' : 'Life Orb';\r\n\t\t}\r\n\t\tif (species.id === 'pawmot') return 'Leppa Berry';\r\n\t\tif (species.id === 'slaking' || (species.id === 'persian' && !!counter.get('Status'))) return 'Silk Scarf';\r\n\t\tif (species.id === 'luvdisc') return 'Binding Band';\r\n\t\tif ((species.name === 'Latias' || species.name === 'Latios')) return 'Soul Dew';\r\n\t\tif (\r\n\t\t\t['froslass', 'ambipom'].includes(species.id) || moves.has('populationbomb') ||\r\n\t\t\t(ability === 'Hustle' && counter.get('setup') && this.randomChance(1, 2))\r\n\t\t) return 'Wide Lens';\r\n\t\tif (moves.has('clangoroussoul') || (species.id === 'toxtricity' && moves.has('shiftgear'))) return 'Throat Spray';\r\n\t\tif (species.id === 'necrozmaduskmane' || species.id === 'rhyperior') return 'Weakness Policy';\r\n\t\tif (\r\n\t\t\t['dragonenergy', 'waterspout'].some(m => moves.has(m)) ||\r\n\t\t\t(species.id === 'rampardos' && role === 'Choice Item user')\r\n\t\t) return 'Choice Scarf';\r\n\t\tif (species.id === 'mabosstiff' && moves.has('jawlock')) return 'Shed Shell';\r\n\t\tif ((species.id === 'terapagos' && moves.has('rapidspin'))) return 'Heavy-Duty Boots';\r\n\t\tif (\r\n\t\t\t['Cheek Pouch', 'Cud Chew', 'Harvest', 'Ripen'].some(m => ability === m) ||\r\n\t\t\tmoves.has('bellydrum')\r\n\t\t) {\r\n\t\t\treturn 'Sitrus Berry';\r\n\t\t}\r\n\t\tif (['healingwish', 'switcheroo', 'trick'].some(m => moves.has(m))) {\r\n\t\t\tif (\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\trole !== 'Wallbreaker' && !counter.get('priority')\r\n\t\t\t) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (species.id === 'scyther') return (isLead && !moves.has('uturn')) ? 'Eviolite' : 'Heavy-Duty Boots';\r\n\t\t// belt on electivire if it has 2 moves that aren't electric or protect\r\n\t\tif (species.id === 'electivire' && counter.get('Electric') < 3 - +moves.has('protect')) return 'Expert Belt';\r\n\t\tif (ability === 'Poison Heal') return 'Toxic Orb';\r\n\t\tif (species.nfe) return 'Eviolite';\r\n\t\tif (moves.has('facade')) {\r\n\t\t\treturn (types.includes('Fire') || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (ability === 'Magic Guard' || (ability === 'Sheer Force' && counter.get('sheerforce'))) return 'Life Orb';\r\n\t\tif (moves.has('dragondance')) return 'Clear Amulet';\r\n\t\tif (counter.get('skilllink') && ability !== 'Skill Link' && species.id !== 'breloom') return 'Loaded Dice';\r\n\t\tif (ability === 'Unburden') {\r\n\t\t\treturn (moves.has('closecombat') || moves.has('leafstorm')) ? 'White Herb' : 'Sitrus Berry';\r\n\t\t}\r\n\t\tif (moves.has('shellsmash') && ability !== 'Weak Armor') return 'White Herb';\r\n\t\tif (moves.has('meteorbeam') || (moves.has('electroshot') && !teamDetails.rain)) return 'Power Herb';\r\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (ability === 'Gluttony') return `${this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki'])} Berry`;\r\n\t\tif (\r\n\t\t\tmoves.has('rest') && !moves.has('sleeptalk') &&\r\n\t\t\tability !== 'Natural Cure' && ability !== 'Shed Skin'\r\n\t\t) {\r\n\t\t\treturn 'Chesto Berry';\r\n\t\t}\r\n\t\tif (\r\n\t\t\tspecies.id !== 'yanmega' &&\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 2 && (!types.includes('Flying'))\r\n\t\t) return 'Heavy-Duty Boots';\r\n\t}\r\n\r\n\toverride getItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t) {\r\n\t\tconst scarfReqs = species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && !counter.get('priority');\r\n\t\tif (role === 'Choice Item user') {\r\n\t\t\tif (counter.get('Physical') > counter.get('Special')) {\r\n\t\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t\t} else {\r\n\t\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\trole === 'Wallbreaker' &&\r\n\t\t\t(\r\n\t\t\t\tcounter.get('Physical') >= moves.size || counter.get('Special') >= moves.size ||\r\n\t\t\t\t(counter.get('Special') === (moves.size - 1) && ['flipturn', 'uturn'].some(m => moves.has(m)))\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (['blizzard', 'originpulse', 'precipiceblades'].some(m => moves.has(m))) return 'Blunder Policy';\r\n\t\tif (!counter.get('Status') && role !== 'Wallbreaker') {\r\n\t\t\treturn 'Assault Vest';\r\n\t\t}\r\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 1 || (\r\n\t\t\t(moves.has('defog') || moves.has('rapidspin')) &&\r\n\t\t\t(counter.get('recovery') || ['flipturn', 'partingshot', 'shedtail', 'uturn', 'voltswitch'].some(m => moves.has(m)))\r\n\t\t)) {\r\n\t\t\treturn 'Heavy-Duty Boots';\r\n\t\t}\r\n\t\tif (['Wallbreaker', 'Fast Attacker'].includes(role) || species.id === 'golduck' && this.prng.randomChance(1, 2)) {\r\n\t\t\tconst damagingTypes = [...counter.basePowerMoves].map(m => m.type);\r\n\t\t\tif (counter.basePowerMoves.size >= 2 && (new Set(damagingTypes)).size === 1) {\r\n\t\t\t\tif (damagingTypes[0] === 'Normal') return 'Silk Scarf';\r\n\t\t\t\treturn this.dex.species.get('arceus' + damagingTypes[0]).requiredItems![0];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (['Bulky Attacker', 'Bulky Setup', 'Bulky Support'].includes(role) || moves.has('substitute')) return 'Leftovers';\r\n\t\tif (\r\n\t\t\t(ability === 'Protosynthesis' || ability === 'Quark Drive') && !isLead && !counter.get('hazards') &&\r\n\t\t\tspecies.id !== 'screamtail' && (species.id !== 'ironvaliant' || role !== 'Wallbreaker') &&\r\n\t\t\t['flipturn', 'uturn', 'voltswitch'].every(m => !moves.has(m))\r\n\t\t) {\r\n\t\t\treturn 'Booster Energy';\r\n\t\t}\r\n\t\tif (role === 'Imprisoner') return 'Leftovers';\r\n\t\tif (role === 'Wallbreaker') return 'Life Orb';\r\n\t\treturn 'Sitrus Berry';\r\n\t}\r\n\r\n\toverride getLevel(\r\n\t\tspecies: Species,\r\n\t): number {\r\n\t\tif (this.adjustLevel) return this.adjustLevel;\r\n\t\treturn this.randomSets[species.id].level!;\r\n\t}\r\n\r\n\toverride randomSet(\r\n\t\ts: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false,\r\n\t\tisDoubles = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tconst species = this.dex.species.get(s);\r\n\t\tconst forme = species.baseSpecies === 'Basculin' ? species.name : this.getForme(species);\r\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\r\n\t\tconst possibleSets = [];\r\n\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\r\n\t\tfor (const set of sets) {\r\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\r\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Prevent Imprisoner if the team already has two\r\n\t\t\tif (!!teamDetails.imprison && teamDetails.imprison >= 2 && set.role === 'Imprisoner') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tpossibleSets.push(set);\r\n\t\t}\r\n\t\tconst set = this.sampleIfArray(possibleSets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = [];\r\n\t\tfor (const movename of set.movepool) {\r\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\r\n\t\t}\r\n\t\tconst teraTypes = set.teraTypes;\r\n\t\tlet teraType = this.sampleIfArray(teraTypes);\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\r\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst abilities = set.abilities!;\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType!, role);\r\n\t\tconst counter = this.queryMoves(moves, species, teraType!, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType!, role);\r\n\r\n\t\t// Get items\r\n\t\t// First, the priority items\r\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType!, role);\r\n\t\tif (item === undefined) {\r\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType!, role);\r\n\t\t}\r\n\r\n\t\t// Get level\r\n\t\tconst level = this.getLevel(species);\r\n\r\n\t\t// Prepare optimal HP for Belly Drum and Life Orb\r\n\t\tlet hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\tlet targetHP = hp;\r\n\t\tconst minimumHP = Math.floor(Math.floor(2 * species.baseStats.hp + 100) * level / 100 + 10);\r\n\t\tif (item === \"Life Orb\") {\r\n\t\t\ttargetHP = Math.floor(hp / 10) * 10 - 1;\r\n\t\t} else if (moves.has(\"bellydrum\")) {\r\n\t\t\ttargetHP = Math.floor(hp / 2) * 2;\r\n\t\t}\r\n\t\t// If the difference is too extreme, don't adjust HP\r\n\t\tif (hp > targetHP && hp - targetHP <= 3 && targetHP >= minimumHP) {\r\n\t\t\t// If setting evs to 0 is sufficient, decrement evs, otherwise decrement ivs with evs set to 0\r\n\t\t\tif (Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + 100) * level / 100 + 10) >= targetHP) {\r\n\t\t\t\tevs.hp = 0;\r\n\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\t\twhile (hp > targetHP) {\r\n\t\t\t\t\tivs.hp -= 1;\r\n\t\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\twhile (hp > targetHP) {\r\n\t\t\t\t\tevs.hp -= 4;\r\n\t\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tconst noAttackStatMoves = [...moves].every(m => {\r\n\t\t\tconst move = this.dex.moves.get(m);\r\n\t\t\tif (move.damageCallback || move.damage) return true;\r\n\t\t\tif (move.id === 'shellsidearm' && item !== 'Choice Specs') return false;\r\n\t\t\tif (move.id === 'terablast' && (\r\n\t\t\t\tspecies.id === 'porygon' || species.baseStats.atk > species.baseStats.spa)\r\n\t\t\t) return false;\r\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\r\n\t\t});\r\n\r\n\t\tif (noAttackStatMoves) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = 0;\r\n\t\t}\r\n\r\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\r\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\tteraType,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\trandomFFATeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.getSeed();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst isDoubles = this.format.gameType !== 'singles';\r\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\t// PotD stuff\r\n\t\tconst usePotD = global.Config && Config.potd && ruleTable.has('potd');\r\n\t\tconst potd = usePotD ? this.dex.species.get(Config.potd) : null;\r\n\r\n\t\tconst baseFormes: { [k: string]: number } = {};\r\n\r\n\t\tconst typeCount: { [k: string]: number } = {};\r\n\t\tconst typeComboCount: { [k: string]: number } = {};\r\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\r\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = Object.keys(this.randomSets);\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\r\n\t\tlet leadsRemaining = 1;\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tlet species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Treat Ogerpon formes and Terapagos like the Tera Blast user role; reject if team has one already\r\n\t\t\tif (['ogerponhearthflame', 'terapagos'].includes(species.id) && teamDetails.teraBlast) continue;\r\n\r\n\t\t\t// Illusion shouldn't be on the last slot\r\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\tconst weakToFreezeDry = (\r\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\r\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\r\n\t\t\t);\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\tlet skip = false;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\r\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit four weak to Freeze-Dry\r\n\t\t\t\tif (weakToFreezeDry) {\r\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Limit three of any type combination in Monotype\r\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\r\n\r\n\t\t\t// The Pokemon of the Day\r\n\t\t\tif (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\r\n\r\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\r\n\r\n\t\t\tif (leadsRemaining) {\r\n\t\t\t\tif (NO_LEAD_POKEMON.includes(species.baseSpecies)) {\r\n\t\t\t\t\tif (pokemon.length + leadsRemaining === this.maxTeamSize) continue;\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\t\tpokemon.push(set);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, true, isDoubles);\r\n\t\t\t\t\tpokemon.unshift(set);\r\n\t\t\t\t\tleadsRemaining--;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\tpokemon.push(set);\r\n\t\t\t}\r\n\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\r\n\t\t\t\ttypeWeaknesses['Fire']++;\r\n\t\t\t}\r\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Track what the team has\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\r\n\t\t\t\tteamDetails.sun = 1;\r\n\t\t\t}\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\r\n\t\t\t\tteamDetails.snow = 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('healbell')) teamDetails.statusCure = 1;\r\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\r\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\r\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\r\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\r\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\r\n\t\t\t\tteamDetails.screens = 1;\r\n\t\t\t}\r\n\t\t\tif (set.role === 'Tera Blast user' || ['ogerponhearthflame', 'terapagos'].includes(species.id)) {\r\n\t\t\t\tteamDetails.teraBlast = 1;\r\n\t\t\t}\r\n\t\t\tif (set.role === 'Imprisoner') teamDetails.imprison = (teamDetails.imprison || 0) + 1;\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\toverride randomSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./sets.json');\r\n}\r\n\r\nexport default RandomFFATeams;\r\n"],
  "mappings": "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",
  "names": ["moveid", "set"]
}
