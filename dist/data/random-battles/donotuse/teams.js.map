{
  "version": 3,
  "sources": ["../../../../data/random-battles/donotuse/teams.ts"],
  "sourcesContent": ["import { RandomTeams, type MoveCounter } from \"../gen9/teams\";\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\r\n];\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\r\n\t'filletaway',\r\n];\r\n// Moves which boost Special Attack:\r\nconst SPECIAL_SETUP = [\r\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow', 'takeheart', 'torchsong', 'filletaway',\r\n];\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'trailblaze',\r\n];\r\n// Conglomerate for ease of access\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cosmicpower', 'curse', 'dragondance',\r\n\t'filletaway', 'flamecharge', 'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch', 'quiverdance',\r\n\t'rockpolish', 'shellsmash', 'shiftgear', 'swordsdance', 'tailglow', 'takeheart', 'tidyup', 'trailblaze', 'trickroom', 'workup', 'victorydance',\r\n];\r\nconst SPEED_CONTROL = [\r\n\t'electroweb', 'glare', 'icywind', 'lowsweep', 'quash', 'stringshot', 'tailwind', 'thunderwave', 'trickroom',\r\n];\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\r\n];\r\n// Protect and its variants\r\nconst PROTECT_MOVES = [\r\n\t'banefulbunker', 'burningbulwark', 'protect', 'silktrap', 'spikyshield',\r\n];\r\n// Moves that switch the user out\r\nconst PIVOT_MOVES = [\r\n\t'chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch',\r\n];\r\n\r\n// Moves that should be paired together when possible\r\nconst MOVE_PAIRS = [\r\n\t['lightscreen', 'reflect'],\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t['leechseed', 'protect'],\r\n\t['leechseed', 'substitute'],\r\n\t['leechseed', 'burningbulwark'],\r\n];\r\n\r\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\r\nconst PRIORITY_POKEMON = [\r\n\t'breloom', 'brutebonnet', 'cacturne', 'honchkrow', 'mimikyu', 'ragingbolt', 'scizor',\r\n];\r\n\r\n/** Pokemon who should never be in the lead slot */\r\nconst NO_LEAD_POKEMON = [\r\n\t'Zacian', 'Zamazenta',\r\n];\r\nconst DOUBLES_NO_LEAD_POKEMON = [\r\n\t'Basculegion', 'Houndstone', 'Iron Bundle', 'Roaring Moon', 'Zacian', 'Zamazenta',\r\n];\r\nexport class RandomDNUTeams extends RandomTeams {\r\n\toverride cullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Develop additional move lists\r\n\t\tconst statusMoves = this.cachedStatusMoves;\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.screens) {\r\n\t\t\tif (movePool.includes('auroraveil')) this.fastPop(movePool, movePool.indexOf('auroraveil'));\r\n\t\t\tif (movePool.length >= this.maxMoveCount + 2) {\r\n\t\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\r\n\t\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (teamDetails.stickyWeb) {\r\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stealthRock) {\r\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.toxicSpikes) {\r\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\r\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.statusCure) {\r\n\t\t\tif (movePool.includes('healbell')) this.fastPop(movePool, movePool.indexOf('healbell'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\tif (isDoubles) {\r\n\t\t\tconst doublesIncompatiblePairs = [\r\n\t\t\t\t// In order of decreasing generalizability\r\n\t\t\t\t[SPEED_CONTROL, SPEED_CONTROL],\r\n\t\t\t\t[HAZARDS, HAZARDS],\r\n\t\t\t\t['rockslide', 'stoneedge'],\r\n\t\t\t\t[SETUP, ['fakeout', 'helpinghand']],\r\n\t\t\t\t[PROTECT_MOVES, 'wideguard'],\r\n\t\t\t\t[['fierydance', 'fireblast'], 'heatwave'],\r\n\t\t\t\t['dazzlinggleam', ['fleurcannon', 'moonblast']],\r\n\t\t\t\t['poisongas', ['toxicspikes', 'willowisp']],\r\n\t\t\t\t[RECOVERY_MOVES, ['healpulse', 'lifedew']],\r\n\t\t\t\t['healpulse', 'lifedew'],\r\n\t\t\t\t['haze', 'icywind'],\r\n\t\t\t\t[['hydropump', 'muddywater'], ['muddywater', 'scald']],\r\n\t\t\t\t['disable', 'encore'],\r\n\t\t\t\t['freezedry', 'icebeam'],\r\n\t\t\t\t['energyball', 'leafstorm'],\r\n\t\t\t\t['earthpower', 'sandsearstorm'],\r\n\t\t\t\t['coaching', ['helpinghand', 'howl']],\r\n\t\t\t];\r\n\r\n\t\t\tfor (const pair of doublesIncompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\t\tif (role !== 'Offensive Protect') this.incompatibleMoves(moves, movePool, PROTECT_MOVES, ['flipturn', 'uturn']);\r\n\t\t}\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t[statusMoves, ['healingwish', 'switcheroo', 'trick']],\r\n\t\t\t[SETUP, PIVOT_MOVES],\r\n\t\t\t[SETUP, HAZARDS],\r\n\t\t\t[SETUP, ['defog', 'nuzzle', 'toxic', 'yawn', 'haze']],\r\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\r\n\t\t\t[SPECIAL_SETUP, 'thunderwave'],\r\n\t\t\t['substitute', PIVOT_MOVES],\r\n\t\t\t[SPEED_SETUP, ['aquajet', 'rest', 'trickroom']],\r\n\t\t\t['curse', ['irondefense', 'rapidspin']],\r\n\t\t\t['dragondance', 'dracometeor'],\r\n\t\t\t['yawn', 'roar'],\r\n\t\t\t['trick', 'uturn'],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t[['psychic', 'psychicnoise'], ['psyshock', 'psychicnoise']],\r\n\t\t\t['surf', ['hydropump', 'scald']],\r\n\t\t\t['liquidation', 'wavecrash'],\r\n\t\t\t['aquajet', 'flipturn'],\r\n\t\t\t['gigadrain', 'leafstorm'],\r\n\t\t\t['powerwhip', 'hornleech'],\r\n\t\t\t['airslash', 'hurricane'],\r\n\t\t\t['knockoff', 'foulplay'],\r\n\t\t\t['throatchop', ['crunch', 'lashout']],\r\n\t\t\t['doubleedge', ['bodyslam', 'headbutt']],\r\n\t\t\t[['fireblast', 'magmastorm'], ['fierydance', 'flamethrower', 'lavaplume']],\r\n\t\t\t['thunderpunch', 'wildcharge'],\r\n\t\t\t['thunderbolt', 'discharge'],\r\n\t\t\t['gunkshot', ['direclaw', 'poisonjab', 'sludgebomb']],\r\n\t\t\t['aurasphere', 'focusblast'],\r\n\t\t\t['closecombat', 'drainpunch'],\r\n\t\t\t[['dragonpulse', 'spacialrend'], 'dracometeor'],\r\n\t\t\t['heavyslam', 'flashcannon'],\r\n\t\t\t['alluringvoice', 'dazzlinggleam'],\r\n\r\n\t\t\t// These status moves are redundant with each other\r\n\t\t\t['taunt', 'disable'],\r\n\t\t\t[['thunderwave', 'toxic'], ['thunderwave', 'willowisp']],\r\n\t\t\t[['thunderwave', 'toxic', 'willowisp'], 'toxicspikes'],\r\n\r\n\t\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\r\n\t\t\t// Landorus and Thundurus\r\n\t\t\t['nastyplot', ['rockslide', 'knockoff']],\r\n\t\t\t// Persian\r\n\t\t\t['switcheroo', 'fakeout'],\r\n\t\t\t// Amoonguss, though this can work well as a general rule later\r\n\t\t\t['toxic', 'clearsmog'],\r\n\t\t\t// Chansey and Blissey\r\n\t\t\t['healbell', 'stealthrock'],\r\n\t\t\t// Araquanid and Magnezone\r\n\t\t\t['mirrorcoat', ['hydropump', 'bodypress']],\r\n\t\t\t// Marill\r\n\t\t\t['seismictoss', 'liquidation'],\r\n\t\t\t// Hatenna\r\n\t\t\t['calmmind', 'mysticalfire'],\r\n\t\t\t// Jigglypuff\r\n\t\t\t[['toxic', 'thunderwave'], 'encore'],\r\n\t\t\t['calmmind', 'nastyplot'],\r\n\t\t\t// Impidimp\r\n\t\t\t['dazzlinggleam', 'thunderwave'],\r\n\t\t\t// Combee\r\n\t\t\t['lunge', 'bugbuzz'],\r\n\t\t\t// Nidoran-F\r\n\t\t\t['sludgebomb', 'poisonjab'],\r\n\t\t\t// Wattrel\r\n\t\t\t['thunder', 'thunderbolt'],\r\n\t\t\t['voltswitch', 'uturn'],\r\n\t\t\t// Nacli\r\n\t\t\t['rockslide', 'stoneedge'],\r\n\t\t\t// Cleffa and Impidimp\r\n\t\t\t[['alluringvoice', 'dazzlinggleam'], 'drainingkiss'],\r\n\t\t\t// Fletchling\r\n\t\t\t['bravebird', 'dualwingbeat'],\r\n\t\t\t// Gossifleur\r\n\t\t\t['sleeppowder', 'stunspore'],\r\n\t\t\t// Swablu\r\n\t\t\t['defog', 'cottonguard'],\r\n\t\t\t// Pidove\r\n\t\t\t['nightslash', ['quickattack', 'roost']],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tif (!types.includes('Ice')) this.incompatibleMoves(moves, movePool, 'icebeam', 'icywind');\r\n\r\n\t\tif (!isDoubles) this.incompatibleMoves(moves, movePool, 'taunt', 'encore');\r\n\r\n\t\tif (!types.includes('Dark') && teraType !== 'Dark') this.incompatibleMoves(moves, movePool, 'knockoff', 'suckerpunch');\r\n\r\n\t\tif (!abilities.includes('Prankster')) this.incompatibleMoves(moves, movePool, 'thunderwave', 'yawn');\r\n\r\n\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context:\r\n\t\t// To force Close Combat on Barraskewda without locking it to Tera Fighting\r\n\t\tif (species.id === 'barraskewda') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, ['psychicfangs', 'throatchop'], ['poisonjab', 'throatchop']);\r\n\t\t}\r\n\t\t// To force Toxic on Quagsire\r\n\t\tif (species.id === 'quagsire') this.incompatibleMoves(moves, movePool, 'spikes', 'icebeam');\r\n\t\t// Taunt/Knock should be Cyclizar's flex moveslot\r\n\t\tif (species.id === 'cyclizar') this.incompatibleMoves(moves, movePool, 'taunt', 'knockoff');\r\n\t\t// To force Stealth Rock on Camerupt\r\n\t\tif (species.id === 'camerupt') this.incompatibleMoves(moves, movePool, 'roar', 'willowisp');\r\n\t\t// nothing else rolls these lol\r\n\t\tif (species.id === 'coalossal') this.incompatibleMoves(moves, movePool, 'flamethrower', 'overheat');\r\n\t}\r\n\r\n\toverride randomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tmovePool: string[],\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tif (role === 'Tera Blast user') {\r\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Facade if Guts is a possible ability\r\n\t\tif (movePool.includes('facade') && abilities.includes('Guts')) {\r\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Night Shade, Revelation Dance, Revival Blessing, and Sticky Web\r\n\t\tfor (const moveid of ['nightshade', 'revelationdance', 'revivalblessing', 'stickyweb']) {\r\n\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Trick Room on Doubles Wallbreaker\r\n\t\tif (movePool.includes('trickroom') && role === 'Doubles Wallbreaker') {\r\n\t\t\tcounter = this.addMove('trickroom', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\r\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) {\r\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\tif (movePool.includes('defog')) {\r\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Knock Off on pure Normal- and Fighting-types in singles\r\n\t\tif (!isDoubles && types.length === 1 && (types.includes('Normal') || types.includes('Fighting'))) {\r\n\t\t\tif (movePool.includes('knockoff')) {\r\n\t\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Flip Turn on pure Water-type Wallbreakers\r\n\t\tif (types.length === 1 && types.includes('Water') &&\r\n\t\t\trole === 'Wallbreaker' && movePool.includes('flipturn')) {\r\n\t\t\tcounter = this.addMove('flipturn', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Spore on Smeargle\r\n\t\tif (species.id === 'smeargle') {\r\n\t\t\tif (movePool.includes('spore')) {\r\n\t\t\t\tcounter = this.addMove('spore', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Focus Energy on Spearow\r\n\t\tif (species.id === 'spearow') {\r\n\t\t\tif (movePool.includes('focusenergy')) {\r\n\t\t\t\tcounter = this.addMove('focusenergy', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce moves in doubles\r\n\t\tif (isDoubles) {\r\n\t\t\tconst doublesEnforcedMoves = ['auroraveil', 'mortalspin', 'spore'];\r\n\t\t\tfor (const moveid of doublesEnforcedMoves) {\r\n\t\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Enforce Fake Out on slow Pokemon\r\n\t\t\tif (movePool.includes('fakeout') && species.baseStats.spe <= 50) {\r\n\t\t\t\tcounter = this.addMove('fakeout', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\t// Enforce Tailwind on Prankster and Gale Wings users\r\n\t\t\tif (movePool.includes('tailwind') && (abilities.includes('Prankster') || abilities.includes('Gale Wings'))) {\r\n\t\t\t\tcounter = this.addMove('tailwind', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t\t// Enforce Thunder Wave on Prankster users as well\r\n\t\t\tif (movePool.includes('thunderwave') && abilities.includes('Prankster')) {\r\n\t\t\t\tcounter = this.addMove('thunderwave', moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB priority\r\n\t\tif (\r\n\t\t\t['Bulky Attacker', 'Bulky Setup', 'Wallbreaker', 'Doubles Wallbreaker'].includes(role) ||\r\n\t\t\tPRIORITY_POKEMON.includes(species.id)\r\n\t\t) {\r\n\t\t\tconst priorityMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (\r\n\t\t\t\t\ttypes.includes(moveType) && (move.priority > 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) &&\r\n\t\t\t\t\t(move.basePower || move.basePowerCallback)\r\n\t\t\t\t) {\r\n\t\t\t\t\tpriorityMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (priorityMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(priorityMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a single STAB for Moltres\r\n\t\tif (species.id === 'moltres') {\r\n\t\t\tconst typeToEnforce = this.randomChance(1, 2) ? 'Fire' : 'Flying';\r\n\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && typeToEnforce === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(typeToEnforce)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Moltres already has STAB, so ignore this block\r\n\t\t\tif (species.id === 'moltres') break;\r\n\t\t\t// prevents Meowscarada from being enforced stab moves\r\n\t\t\tif (species.id === 'meowscarada') break;\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Tera STAB\r\n\t\t// prevents Meowscarada from being enforced stab moves (since it has Protean and doesn't care)\r\n\t\tif (!counter.get('stabtera') && !['Bulky Support', 'Doubles Support'].includes(role) &&\r\n\t\t\t!abilities.includes('Protean')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\t// prevents Meowscarada from being enforced stab moves (since it has Protean and doesn't care)\r\n\t\tif (!counter.get('stab') && !abilities.includes('Protean')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup'].includes(role)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\r\n\t\t\t// First, try to add a non-Speed setup move\r\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\r\n\t\t\tif (nonSpeedSetupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\r\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\r\n\t\t\t\tif (setupMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce redirecting moves and Fake Out on Doubles Support\r\n\t\tif (role === 'Doubles Support') {\r\n\t\t\tfor (const moveid of ['fakeout', 'followme', 'ragepowder']) {\r\n\t\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Protect\r\n\t\tif (role.includes('Protect')) {\r\n\t\t\tconst protectMoves = movePool.filter(moveid => PROTECT_MOVES.includes(moveid));\r\n\t\t\tif (protectMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(protectMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce coverage move\r\n\t\tif (!['AV Pivot', 'Fast Support', 'Bulky Support', 'Bulky Protect', 'Doubles Support'].includes(role)) {\r\n\t\t\tif (counter.damagingMoves.size === 1) {\r\n\t\t\t\t// Find the type of the current attacking move\r\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value!.type;\r\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\r\n\t\t\t\tconst coverageMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (coverageMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\r\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tmoves.add(moveid);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\tmovePool, teraType, role);\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\r\n\t\t\t\t\t\tmovePool, teraType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\toverride getPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tteraType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t) {\r\n\t\tif (!isDoubles) {\r\n\t\t\tif (role === 'Fast Bulky Setup' && (ability === 'Quark Drive' || ability === 'Protosynthesis')) {\r\n\t\t\t\treturn 'Booster Energy';\r\n\t\t\t}\r\n\t\t\tif (species.id === 'lokix') {\r\n\t\t\t\treturn (role === 'Fast Attacker') ? 'Silver Powder' : 'Life Orb';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (species.requiredItems) {\r\n\t\t\t// Z-Crystals aren't available in Gen 9, so require Plates\r\n\t\t\tif (species.baseSpecies === 'Arceus') {\r\n\t\t\t\treturn species.requiredItems[0];\r\n\t\t\t}\r\n\t\t\treturn this.sample(species.requiredItems);\r\n\t\t}\r\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\r\n\t\tif (species.id === 'pikachu') return 'Light Ball';\r\n\t\tif (species.id === 'regieleki') return 'Magnet';\r\n\t\tif (species.id === 'smeargle') return 'Focus Sash';\r\n\t\tif (species.id === 'nickit') return 'Throat Spray';\r\n\t\tif (species.id === 'lechonk' && moves.has('stuffcheeks')) return 'Salac Berry';\r\n\t\tif (species.id === 'spearow') return 'Razor Claw';\r\n\t\tif (species.id === 'pidove' && moves.has('nightslash')) return 'Scope Lens';\r\n\t\tif (['shedinja', 'luvdisc', 'nymble', 'fletchling'].includes(species.id)) return 'Heavy-Duty Boots';\r\n\t\tif ((ability === 'Guts' || moves.has('facade')) && !moves.has('sleeptalk')) {\r\n\t\t\treturn (types.includes('Fire') || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (ability === 'Sheer Force' && counter.get('sheerforce')) return 'Life Orb';\r\n\t\tif (moves.has('raindance') || moves.has('sunnyday')) return 'Life Orb';\r\n\t\tif (['healingwish', 'switcheroo', 'trick'].some(m => moves.has(m))) {\r\n\t\t\tif (\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\trole !== 'Wallbreaker' && role !== 'Doubles Wallbreaker' && !counter.get('priority')\r\n\t\t\t) {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\trole === 'Wallbreaker' && (counter.get('Physical') > counter.get('Special')) && !counter.get('Status')\r\n\t\t) {\r\n\t\t\treturn 'Choice Band';\r\n\t\t}\r\n\t\tif (\r\n\t\t\trole === 'Wallbreaker' && (counter.get('Physical') < counter.get('Special')) && !counter.get('Status')\r\n\t\t) {\r\n\t\t\treturn 'Choice Specs';\r\n\t\t}\r\n\t\tif (ability === 'Poison Heal' || ability === 'Quick Feet') return 'Toxic Orb';\r\n\t\tif (moves.has('acrobatics') && ability !== 'Protosynthesis') return '';\r\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (ability === 'Gluttony') return `${this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki'])} Berry`;\r\n\t\tif (\r\n\t\t\t['Cheek Pouch', 'Cud Chew', 'Harvest', 'Ripen'].some(m => ability === m) ||\r\n\t\t\tmoves.has('bellydrum') || moves.has('filletaway')\r\n\t\t) {\r\n\t\t\treturn 'Sitrus Berry';\r\n\t\t}\r\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 2) return 'Heavy-Duty Boots';\r\n\t\tif (species.nfe) return 'Eviolite';\r\n\t}\r\n\r\n\toverride randomSet(\r\n\t\ts: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false,\r\n\t\tisDoubles = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tconst species = this.dex.species.get(s);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\r\n\t\tconst possibleSets: RandomTeamsTypes.RandomSetData[] = [];\r\n\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\r\n\t\tfor (const set of sets) {\r\n\t\t\t// Prevent Fast Bulky Setup on lead Paradox Pokemon, since it generates Booster Energy.\r\n\t\t\tconst abilities = set.abilities!;\r\n\t\t\tif (\r\n\t\t\t\tisLead && (abilities.includes('Protosynthesis') || abilities.includes('Quark Drive')) &&\r\n\t\t\t\tset.role === 'Fast Bulky Setup'\r\n\t\t\t) continue;\r\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\r\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tpossibleSets.push(set);\r\n\t\t}\r\n\t\tconst set = this.sampleIfArray(possibleSets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = [];\r\n\t\tfor (const movename of set.movepool) {\r\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\r\n\t\t}\r\n\t\tconst teraTypes = set.teraTypes!;\r\n\t\tlet teraType = this.sampleIfArray(teraTypes);\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\r\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst abilities = set.abilities!;\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);\r\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\r\n\t\t// Get items\r\n\t\t// First, the priority items\r\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);\r\n\t\tif (item === undefined) {\r\n\t\t\tif (isDoubles) {\r\n\t\t\t\titem = this.getDoublesItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\r\n\t\t\t} else {\r\n\t\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Get level\r\n\t\tconst level = this.getLevel(species, isDoubles);\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\r\n\t\tlet srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\r\n\t\t// Crash damage move users want an odd HP to survive two misses\r\n\t\tif (['axekick', 'highjumpkick', 'jumpkick'].some(m => moves.has(m))) srWeakness = 2;\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tif ((moves.has('substitute') && ['Sitrus Berry', 'Salac Berry'].includes(item))) {\r\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\r\n\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t} else if ((moves.has('bellydrum') || moves.has('filletaway')) && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else if (moves.has('substitute') && moves.has('endeavor')) {\r\n\t\t\t\t// Luvdisc should be able to Substitute down to very low HP\r\n\t\t\t\tif (hp % 4 > 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator' || ['Leftovers', 'Life Orb', 'Eviolite'].includes(item)) break;\r\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\r\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\r\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tconst noAttackStatMoves = [...moves].every(m => {\r\n\t\t\tconst move = this.dex.moves.get(m);\r\n\t\t\tif (move.damageCallback || move.damage) return true;\r\n\t\t\tif (move.id === 'shellsidearm') return false;\r\n\t\t\t// Magearna and doubles Dragonite, though these can work well as a general rule\r\n\t\t\tif (move.id === 'terablast' && (\r\n\t\t\t\tspecies.id === 'porygon2' || moves.has('shiftgear') || species.baseStats.atk > species.baseStats.spa)\r\n\t\t\t) return false;\r\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\r\n\t\t});\r\n\t\t// prevents Illumise (who can turn into Volbeat with Physical moves) from having 0 Atk EVs\r\n\t\tif (noAttackStatMoves && !moves.has('transform') && this.format.mod !== 'partnersincrime' &&\r\n\t\t\tspecies.id !== 'illumise') {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\t// Hidden Power Grass IVs\r\n\t\tif (species.id === 'luvdisc' && moves.has('hiddenpower')) {\r\n\t\t\tivs.atk = 0;\r\n\t\t\tivs.spa = 30;\r\n\t\t}\r\n\r\n\t\t// Hidden Power Psychic IVs\r\n\t\tif (species.id === 'unown') {\r\n\t\t\tivs.atk = 0;\r\n\t\t\tivs.spe = 30;\r\n\t\t}\r\n\r\n\t\t// Hidden Power Fire IVs\r\n\t\tif (['fomantis', 'nincada', 'petilil', 'cherubi'].includes(species.id) && moves.has('hiddenpower')) {\r\n\t\t\tivs.atk = 0;\r\n\t\t\tivs.spa = 30;\r\n\t\t\tivs.spe = 30;\r\n\t\t}\r\n\r\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\r\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.baseSpecies === 'Greninja' ? 'M' : (species.gender || (this.random(2) ? 'F' : 'M')),\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\tteraType,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\toverride randomSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./random-sets.json');\r\n\r\n\trandomDNUTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.getSeed();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst isDoubles = this.format.gameType !== 'singles';\r\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\t// PotD stuff\r\n\t\t// const usePotD = global.Config && Config.potd && ruleTable.has('potd');\r\n\t\t// const potd = usePotD ? this.dex.species.get(Config.potd) : null;\r\n\r\n\t\tconst baseFormes: { [k: string]: number } = {};\r\n\r\n\t\tconst typeCount: { [k: string]: number } = {};\r\n\t\tconst typeComboCount: { [k: string]: number } = {};\r\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\r\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = Object.keys(this.randomSets);\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\r\n\t\tlet leadsRemaining = this.format.gameType === 'doubles' ? 2 : 1;\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tconst species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Treat Ogerpon formes and Terapagos like the Tera Blast user role; reject if team has one already\r\n\t\t\tif (['ogerpon', 'ogerponhearthflame', 'terapagos'].includes(species.id) && teamDetails.teraBlast) continue;\r\n\r\n\t\t\t// Illusion shouldn't be on the last slot\r\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\tconst weakToFreezeDry = (\r\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\r\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\r\n\t\t\t);\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\t// TEMPORARILY ADJUSTING BALANCE OF THIS BLOCK -- TOO FEW POKEMON TO GENERATE TEAMS\r\n\t\t\t// update: reverting these changes, but leaving just in case\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\tlet skip = false;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\t// ADJUSTING TO 6 -- ADJUST BACK AFTER MORE POKEMON HAVE BEEN ADDED\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 /* 6 */ * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\r\n\t\t\t\t// ADJUSTING TO 6 -- ADJUST BACK AFTER MORE POKEMON HAVE BEEN ADDED\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 /* 6 */ * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= 1 /* 6 */ * Number(limitFactor)) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\t\t// ADJUSTING TO 6 -- ADJUST BACK AFTER MORE POKEMON HAVE BEEN ADDED\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\r\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 /* 6 */ * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit four weak to Freeze-Dry\r\n\t\t\t\t// ADJUSTING TO 6 -- ADJUST BACK AFTER MORE POKEMON HAVE BEEN ADDED\r\n\t\t\t\tif (weakToFreezeDry) {\r\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 /* 6 */ * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species, isDoubles) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Limit three of any type combination in Monotype\r\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\r\n\r\n\t\t\t// The Pokemon of the Day\r\n\t\t\t// if (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\r\n\r\n\t\t\t// testing code\r\n\t\t\t// if (pokemon.length === 0 || this.maxTeamSize === 1) species = this.dex.species.get('Terapagos');\r\n\r\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\r\n\r\n\t\t\tif (leadsRemaining) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tisDoubles && DOUBLES_NO_LEAD_POKEMON.includes(species.baseSpecies) ||\r\n\t\t\t\t\t!isDoubles && NO_LEAD_POKEMON.includes(species.baseSpecies)\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (pokemon.length + leadsRemaining === this.maxTeamSize) continue;\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\t\tpokemon.push(set);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tset = this.randomSet(species, teamDetails, true, isDoubles);\r\n\t\t\t\t\tpokemon.unshift(set);\r\n\t\t\t\t\tleadsRemaining--;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\r\n\t\t\t\tpokemon.push(set);\r\n\t\t\t}\r\n\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\r\n\t\t\t\ttypeWeaknesses['Fire']++;\r\n\t\t\t}\r\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Track what the team has\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\r\n\t\t\t\tteamDetails.sun = 1;\r\n\t\t\t}\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\r\n\t\t\t\tteamDetails.snow = 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('healbell')) teamDetails.statusCure = 1;\r\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\r\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\t}\r\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\r\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\r\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\r\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\r\n\t\t\t\tteamDetails.screens = 1;\r\n\t\t\t}\r\n\t\t\tif (set.role === 'Tera Blast user' || species.baseSpecies === \"Ogerpon\" || species.baseSpecies === \"Terapagos\") {\r\n\t\t\t\tteamDetails.teraBlast = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomDNUTeams;\r\n"],
  "mappings": "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",
  "names": ["moveid", "set", "abilities"]
}
